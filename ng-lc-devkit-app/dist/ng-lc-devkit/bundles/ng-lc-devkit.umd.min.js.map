{"version":3,"sources":["ng://ng-lc-devkit/lib/ng-lc-devkit.service.ts","ng://ng-lc-devkit/lib/ng-lc-devkit.component.ts","ng://ng-lc-devkit/lib/progress-bar/progress-bar.component.ts","ng://ng-lc-devkit/lib/timeline-item-detail/timeline-item-detail.component.ts","ng://ng-lc-devkit/lib/timeline-item/timeline-item.component.ts","ng://ng-lc-devkit/lib/timeline-tabs/timeline-tabs.component.ts","ng://ng-lc-devkit/lib/datepicker/datepicker.component.ts","ng://ng-lc-devkit/lib/filter-select/filter-select.component.ts","ng://ng-lc-devkit/lib/services/snack-bar.service.ts","ng://ng-lc-devkit/lib/dialog-alert/dialog-alert.component.ts","ng://ng-lc-devkit/lib/services/dialog-alert.service.ts","ng://ng-lc-devkit/lib/ng-lc-devkit.module.ts"],"names":["NgLcDevkitService","Injectable","args","providedIn","NgLcDevkitComponent","prototype","ngOnInit","Component","selector","template","styles","ProgressBarComponent","Object","defineProperty","value","this","_progressType","_progressValueOne","_progressIcon","_progressValueTwo","Input","TimelineItemDetailComponent","TimelineItemComponent","showItemDetail","_movimentationItem","movementType","getMovimentationNameValidation","movementValue","movementCategory","actionShowItemDetail","TimelineTabsComponent","label","movement","DatepickerComponent","_labelText","FilterSelectComponent","EventEmitter","filterEvent","event","target","filterSelected","throwFilterSelected","emit","Output","SnackBarService","snackBar","openSnackBar","message","action","duration","open","panelClass","MatSnackBar","DialogAlertComponent","dialogRef","close","MatDialogRef","DialogAlertService","dialog","_location","openAlertDialog","title","dialogConfig","MatDialogConfig","disableClose","autoFocus","componentInstance","openAlertDialogAction","afterClosed","subscribe","results","_this","back","MatDialog","Location","NgLcDevkitModule","NgModule","imports","CommonModule","MatProgressBarModule","MatButtonModule","MatTabsModule","MatChipsModule","MatDatepickerModule","MatMenuModule","MatIconModule","MatSnackBarModule","MatDialogModule","declarations","exports","providers","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgLcDevkitService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lc-ng-lc-devkit',\n  template: `\n    <p>\n      ng-lc-devkit works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgLcDevkitComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'lc-progress-bar',\n  template: `<div>\n  <div class=\"icon\" *ngIf=\"progressIconImage\">\n    <figure>\n      <img [src]=\"progressIconSrc\" alt=\"\">\n    </figure>\n    <p>\n      {{ typeName }}\n    </p>\n  </div>\n  <div class=\"texts\">\n    <span *ngIf=\"_progressType !== quota\" [ngClass]=\"\n      {\n      'green' : _progressType === product,\n      'pink' : _progressType === quota\n      }\">{{\n      progressValueOne }}</span>\n    <span *ngIf=\"_progressType !== quota\">{{ progressValueTwo }}</span>\n\n    <span *ngIf=\"_progressType === quota\" [ngClass]=\"\n      {\n      'green' : _progressType === product,\n      'pink' : _progressType === quota\n      }\">{{\n      progressValueOne | currency:'BRL' }}\n    </span>\n    <span *ngIf=\"_progressType === 'quota'\">{{ progressValueTwo | currency:'BRL' }}\n    </span>\n  </div>\n  <mat-progress-bar mode=\"determinate\" value=\"40\" [ngClass]=\"\n    {\n    'green' : _progressType === product,\n    'pink' : _progressType === quota\n    }\"></mat-progress-bar>\n  <div class=\"texts\">\n    <span class=\"bottom\" [ngClass]=\"\n      {\n      'green' : _progressType === product,\n      'quota' : _progressType === quota\n      }\">{{\n      getFirstBottomLabel }}</span>\n    <span class=\"bottom\">{{ getSecondBottomLabel }}</span>\n  </div>\n</div>\n\n\n<div class=\"second-progress-bar\">\n  <div class=\"texts\">\n    <span *ngIf=\"_progressType !== quota\" class=\"blue\">{{\n      progressValueOne }}</span>\n    <span *ngIf=\"_progressType !== quota\">{{ progressValueTwo }}</span>\n\n    <span *ngIf=\"_progressType === quota\" class=\"blue\">{{\n      progressValueOne | currency:'BRL' }}\n    </span>\n    <span *ngIf=\"_progressType === quota\">{{ progressValueTwo | currency:'BRL' }}\n    </span>\n  </div>\n  <mat-progress-bar mode=\"determinate\" value=\"40\" class=\"blue\"></mat-progress-bar>\n  <div class=\"texts\">\n    <span class=\"bottom blue\">{{\n      getFirstBottomLabel }}</span>\n    <span class=\"bottom\">{{ getSecondBottomLabel }}</span>\n  </div>\n</div>\n`\n})\nexport class ProgressBarComponent implements OnInit {\n  _progressType: string;\n  _progressValueOne: number;\n  _progressValueTwo: number;\n  _progressIcon: boolean;\n\n  quota = 'quota';\n  product = 'product';\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  @Input() set progressType(value: string) {\n    this._progressType = value;\n  }\n\n  @Input() set progressValueOne(value: number) {\n    this._progressValueOne = value;\n  }\n\n  @Input() set iconTop(value: boolean) {\n    this._progressIcon = value;\n  }\n\n  @Input() set progressValueTwo(value: number) {\n    this._progressValueTwo = value;\n  }\n\n  get typeName() {\n    return this._progressType === 'quota' ? 'Cotas' : 'Produtos';\n  }\n\n  get getFirstBottomLabel() {\n    return this._progressType === 'quota' ? 'Valor Resgatado' : 'Presenteados';\n  }\n\n  get getSecondBottomLabel() {\n    return this._progressType === 'quota' ? 'Valor Presenteado' : 'Adicionados';\n  }\n\n  get progressValueOne() {\n    return this._progressValueOne;\n  }\n\n  get progressValueTwo() {\n    return this._progressValueTwo;\n  }\n\n  get progressIconImage() {\n    return this._progressIcon;\n  }\n\n  get progressIconSrc() {\n    return this._progressType === 'quota' ? 'assets/images/ico-plane-black.svg' : 'assets/images/ico-product.svg'\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lc-timeline-item-detail',\n  template: `<div class=\"row\">\n  <div class=\"col-auto\">\n    <div class=\"img-item\"></div>\n  </div>\n  <div class=\"col infos-item\">\n    <p>\n        Kitchenaid Batedeira PlanetÃ¡ria 6 vel. prata 110v - SKL9999999999\n    </p>\n    <span>\n        Convidado: Ana LuÃ­za Souto\n    </span>\n    <button mat-raised-button>Presentear um casal</button>\n  </div>\n</div>`,\n})\nexport class TimelineItemDetailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n// import { slideStateTrigger, markedTrigger } from '../../animations';\n\n@Component({\n  selector: 'lc-timeline-item',\n  template: `<div class=\"row\">\n  <div class=\"button-action col-auto\">\n    <button\n      mat-raised-button\n      class=\"fab-more\"\n      [ngClass]=\"\n        { 'rescue': movimentationType === 'rescue' }\n      \"\n      (click)=\"actionShowItemDetail()\"\n      >\n      <span> {{ movimentationType === 'rescue' ? '-' : '+' }} </span>\n    </button>\n  </div>\n\n  <div class=\"text-content col-auto\" (click)=\"actionShowItemDetail()\">\n    <p [ngClass]=\"{ 'rescue': movimentationType === 'rescue' }\">{{ getMovimentationName }}</p>\n    <span>\n      Kitchenaid Batedeira PlanetÃ¡ria 6 velocidades\n    </span>\n  </div>\n\n  <div class=\"col-auto value\">\n    <span [ngClass]=\"{ 'rescue': movimentationType === 'rescue' }\">\n      {{ movimentationType === 'rescue' ? '-'  : '+'}} {{ getMovimentationValue | currency:'BRL' }}\n    </span>\n  </div>\n\n  <div class=\"col-12\" style=\"overflow: hidden;\" *ngIf=\"showItemDetail\">\n    <lc-timeline-item-detail *ngIf=\"showItemDetail\"></lc-timeline-item-detail>\n  </div>\n\n  <!-- <div class=\"col-12\" style=\"overflow: hidden;\" @slideState *ngIf=\"showItemDetail\">\n    <app-timeline-item-detail @slideState *ngIf=\"showItemDetail\"></app-timeline-item-detail>\n  </div> -->\n\n</div>\n`,\n  // animations: [ slideStateTrigger, markedTrigger ]\n})\nexport class TimelineItemComponent implements OnInit {\n  _movimentationItem: any;\n  showItemDetail: boolean;\n\n  constructor() {\n    this.showItemDetail = false;\n  }\n\n  ngOnInit() {\n  }\n\n  @Input() set movimentation(value: any) {\n    this._movimentationItem = value;\n  }\n\n  get movimentationType(): string {\n    return this._movimentationItem.movementType;\n  }\n\n  get getMovimentationName(): string {\n    return this.getMovimentationNameValidation();\n  }\n\n  get getMovimentationValue(): number {\n    return this._movimentationItem.movementValue;\n  }\n\n  getMovimentationNameValidation(): string {\n    if (this._movimentationItem.movementType === 'rescue' && this._movimentationItem.movementCategory === 'product') {\n      return 'Resgate de Produto';\n    } else if (this._movimentationItem.movementType === 'credit' && this._movimentationItem.movementCategory === 'product') {\n      return 'CrÃ©dito de Produto';\n    } else if (this._movimentationItem.movementType === 'credit' && this._movimentationItem.movementCategory === 'quota') {\n      return 'CrÃ©dito de Cota';\n    } else if (this._movimentationItem.movementType === 'rescue' && this._movimentationItem.movementCategory === 'quota') {\n      return 'Resgate de Cota';\n    } else {\n      return 'nulo';\n    }\n  }\n\n  actionShowItemDetail(): void {\n    this.showItemDetail = !this.showItemDetail;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lc-timeline-tabs',\n  template: `<mat-tab-group>\n  <mat-tab label=\"Tudo\">\n    <div *ngFor=\"let day of daysAsLineItem\">\n      <mat-chip-list>\n        <mat-chip>{{ day.label }}</mat-chip>\n      </mat-chip-list>\n      <div class=\"timeline-line\">\n        <lc-timeline-item\n          *ngFor=\"let movement of day.movement\"\n          [movimentation]=\"movement\"\n        ></lc-timeline-item>\n      </div>\n    </div>\n  </mat-tab>\n  <mat-tab label=\"CrÃ©dito\" class=\"center\"> </mat-tab>\n  <mat-tab label=\"Resgates\"> </mat-tab>\n  <mat-tab label=\"Futuro\"></mat-tab>\n</mat-tab-group>\n`,\n})\nexport class TimelineTabsComponent implements OnInit {\n\n  daysAsLineItem: any[] = [\n      {\n        label: 'Hoje',\n        movement: [\n          { movementType: 'credit', movementCategory: 'product', movementValue: 3900 },\n          { movementType: 'credit', movementCategory: 'quota', movementValue: 90300 },\n        ]\n      },\n      {\n        label: '26 de Outubro',\n        movement: [\n          { movementType: 'rescue', movementCategory: 'quota', movementValue: 890000 },\n        ]\n       },\n       {\n        label: '25 de Outubro',\n        movement: [\n          { movementType: 'credit', movementCategory: 'quota', movementValue: 785763 },\n          { movementType: 'credit', movementCategory: 'product', movementValue: 54009 },\n        ]\n       },\n       {\n        label: '26 de Outubro',\n        movement: [\n          { movementType: 'rescue', movementCategory: 'product', movementValue: 76548900 },\n        ]\n       },\n  ];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'lc-datepicker',\n  template: `<div (click)=\"picker.open()\">\n  <label>{{ labelTextView }}</label>\n  <input [matDatepicker]=\"picker\">\n  <mat-datepicker #picker id=\"datePicker\"></mat-datepicker>\n</div>\n`,\n  styles: [``]\n})\nexport class DatepickerComponent implements OnInit {\n\n  _labelText: string;\n\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n  @Input() set labelText(value: string) {\n    this._labelText = value;\n  }\n\n  get labelTextView() {\n    return this._labelText;\n  }\n\n}\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'lc-filter-select',\n  template: `<button mat-raised-button [matMenuTriggerFor]=\"menu\">\n  <mat-icon>filter_list</mat-icon> {{ filterText }} <mat-icon>keyboard_arrow_down</mat-icon>\n</button>\n<mat-menu #menu=\"matMenu\" [class]=\"'filter-select'\">\n  <button mat-menu-item (click)=\"filterEvent($event)\" [value]=\"'Produtos'\">Produtos</button>\n  <button mat-menu-item (click)=\"filterEvent($event)\" [value]=\"'Cotas'\">Cotas</button>\n  <!-- <button mat-menu-item (click)=\"filterEvent($event)\" [value]=\"'Produtos e Cotas'\">Produtos e Cotas</button> -->\n</mat-menu>\n`,\n  styles: [``]\n})\nexport class FilterSelectComponent implements OnInit {\n\n  @Output() throwFilterSelected: EventEmitter<any> = new EventEmitter();\n  filterSelected: any;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  filterEvent(event: any) {\n    if (event.target.value) {\n      this.filterSelected = event.target.value;\n      this.throwFilterSelected.emit(this.filterSelected);\n    }\n  }\n\n  get filterText() {\n    return this.filterSelected ? this.filterSelected : 'Filtrar';\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackBarService {\n\n  constructor(public snackBar: MatSnackBar) { }\n\n  public openSnackBar(message: string, action: string = 'OK', duration: number = 3000) {\n    this.snackBar.open(message, action, {\n      duration: duration,\n      panelClass: ['mat-snack-bar-container']\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\n\n@Component({\n  selector: 'lc-dialog-alert',\n  template: `<h2 mat-dialog-title>{{title}}</h2>\n\n<mat-dialog-content>\n  <p class=\"text-center\"[innerHTML]=\"message\"></p>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n  <button mat-raised-button (click)=\"close()\">OK</button>\n</mat-dialog-actions>`,\n  styles: [``]\n})\nexport class DialogAlertComponent implements OnInit {\n\n  public title;\n  public message;\n\n  constructor(private dialogRef: MatDialogRef<DialogAlertComponent>) { }\n\n  ngOnInit() {\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { DialogAlertComponent } from '../dialog-alert/dialog-alert.component';\nimport { MatDialogRef, MatDialogConfig, MatDialog } from '@angular/material';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogAlertService {\n\n  constructor(private dialog: MatDialog,\n    private _location: Location) {\n\n  }\n\n  public openAlertDialog(title: string, message: string) {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    let dialogRef: MatDialogRef<DialogAlertComponent>;\n    dialogRef = this.dialog.open(DialogAlertComponent, dialogConfig);\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.message = message;\n  }\n\n  public openAlertDialogAction(title: string, message: string) {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    let dialogRef: MatDialogRef<DialogAlertComponent>;\n    dialogRef = this.dialog.open(DialogAlertComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(results => {\n      this._location.back();\n    });\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.message = message;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgLcDevkitComponent } from './ng-lc-devkit.component';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\n\nimport {\n  MatProgressBarModule,\n  MatButtonModule,\n  MatTabsModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatMenuModule,\n  MatIconModule,\n  MatSnackBarModule,\n  MatDialogModule\n} from '@angular/material';\n\nimport { CommonModule } from '@angular/common';\nimport { TimelineItemDetailComponent } from './timeline-item-detail/timeline-item-detail.component';\nimport { TimelineItemComponent } from './timeline-item/timeline-item.component';\nimport { TimelineTabsComponent } from './timeline-tabs/timeline-tabs.component';\nimport { DatepickerComponent } from './datepicker/datepicker.component';\nimport { FilterSelectComponent } from './filter-select/filter-select.component';\nimport { SnackBarService } from './services/snack-bar.service';\nimport { DialogAlertComponent } from './dialog-alert/dialog-alert.component';\nimport { DialogAlertService } from './services/dialog-alert.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatButtonModule,\n    MatTabsModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatMenuModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatDialogModule\n  ],\n  declarations: [\n    NgLcDevkitComponent,\n    ProgressBarComponent,\n    TimelineItemDetailComponent,\n    TimelineItemComponent,\n    TimelineTabsComponent,\n    DatepickerComponent,\n    FilterSelectComponent,\n    DialogAlertComponent\n  ],\n  exports: [\n    NgLcDevkitComponent,\n    ProgressBarComponent,\n    TimelineItemDetailComponent,\n    TimelineItemComponent,\n    TimelineTabsComponent,\n    DatepickerComponent,\n    FilterSelectComponent,\n    DialogAlertComponent\n  ],\n  providers: [SnackBarService, DialogAlertService],\n  entryComponents: [DialogAlertComponent]\n})\nexport class NgLcDevkitModule { }\n"]}